//
//  PlayerViewController.swift
//  player
//
//  Created by Warakorn T on 26/3/2567 BE.
//  Copyright (c) 2567 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AVKit
import AVFoundation

protocol PlayerDisplayLogic: class {
    func displaySetUpPlayerLayer(viewModel: Player.SetUpPlayer.ViewModel)
    func displayPlayPauseButtonTapped(viewModel: Player.PlayPauseButtonTapped.ViewModel)
    func displaySeekBarButtonTapped(viewModel: Player.SeekBarButtonTapped.ViewModel)
}

class PlayerViewController: UIViewController, PlayerDisplayLogic {
    var interactor: PlayerBusinessLogic?
    var router: (NSObjectProtocol & PlayerRoutingLogic & PlayerDataPassing)?
    
    var player: AVPlayer?
    var playerLayer: AVPlayerLayer?
    var pipController: AVPictureInPictureController?
    var isSeeking: Bool = false
    
    // MARK: IBOutlet
    @IBOutlet weak var controlView: UIView!
    @IBOutlet weak var playerView: UIView!
    @IBOutlet weak var seekBarSlider: UISlider!
    @IBOutlet weak var durationLabel: UILabel!
    @IBOutlet weak var playPauseButton: UIButton!
    @IBOutlet weak var forwardButton: UIButton!
    @IBOutlet weak var backwardButton: UIButton!
    @IBOutlet weak var fullScreenButton: UIButton!
    @IBOutlet weak var controlViewHeightConstraint: NSLayoutConstraint!
    
    // Mark: IBAction
    @IBAction func onSeekBarTouchDown(_ sender: UISlider) {
        debugPrint("onSeekBarTouchDown")
        isSeeking = true
    }
    
    @IBAction func onSeekBarTouchUpInside(_ sender: UISlider) {
        debugPrint("onSeekBarTouchUpInside")
        let request = Player.SeekBarButtonTapped.Request(sliderValue: sender.value)
        interactor?.seekBarButtonTapped(request: request)
    }
    
    @IBAction func onSeekBarTouchUpOutside(_ sender: UISlider) {
        debugPrint("onSeekBarTouchUpOutside")
        let request = Player.SeekBarButtonTapped.Request(sliderValue: sender.value)
        interactor?.seekBarButtonTapped(request: request)
    }
    
    @IBAction func onPlayPauseButtonTapped(_ sender: Any) {
        debugPrint("onPlayPauseButtonTapped")
        let request = Player.PlayPauseButtonTapped.Request(isPlay: player?.isPlaying ?? false)
        interactor?.playPauseButtonTapped(request: request)
    }
    
    @IBAction func onForwardButtonTapped(_ sender: Any) {
        debugPrint("onForwardButtonTapped")
    }
    
    @IBAction func onBackwardButtonTapped(_ sender: Any) {
        debugPrint("onBackwardButtonTapped")
    }
    
    @IBAction func onFullScreenButtonTapped(_ sender: Any) {
        debugPrint("onFullScreenButtonTapped")
        if AppDelegate.orientationLock == .portrait {
            UIDevice.forceLandscape()
        } else {
            UIDevice.forcePortrait()
        }
    }
    
    @IBAction func onPipButtonTapped(_ sender: Any) {
        pipController?.startPictureInPicture()
    }
    
    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        super.viewWillTransition(to: size, with: coordinator)
        
        coordinator.animate(alongsideTransition: { _ in
            // Update constraints here based on the new size
            self.updateConstraintsForSize(size)
        }, completion: nil)
    }
    
    private func updateConstraintsForSize(_ size: CGSize) {
        let screenSize = UIScreen.main.bounds.size
        var totalHeight: CGFloat = 0.0
        if screenSize.width > screenSize.height {
            totalHeight = screenSize.height
            UIApplication.navigationTopViewController()?.navigationController?.setNavigationBarHidden(true, animated: true)
        } else {
            totalHeight = screenSize.width * (9 / 16)
            UIApplication.navigationTopViewController()?.navigationController?.setNavigationBarHidden(false, animated: false)
        }
        
        controlViewHeightConstraint.constant = totalHeight
        controlView.layoutIfNeeded()
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = PlayerInteractor()
        let presenter = PlayerPresenter()
        let router = PlayerRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        guard let url = URL(string: "https://sample-videos.com/video321/mp4/720/big_buck_bunny_720p_30mb.mp4") else { return }
        let request = Player.SetUpPlayer.Request(url: url)
        interactor?.setUpPlayer(request: request)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        UIDevice.forceOrientation(type: 3)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
        UIDevice.forcePortrait()
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        playerLayer?.frame = playerView.bounds
    }
    
    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {
        if keyPath == #keyPath(AVPlayer.status) {
            if let newRate = change?[.newKey] as? Float, newRate != 0.0 {
                debugPrint("Player started playing")
                
                playPauseButton.setImage(UIImage(systemName: "pause.fill"), for: .normal)
            }
            if let statusValue = change?[.newKey] as? Int, let status = AVPlayer.Status(rawValue: statusValue) {
                switch status {
                case .readyToPlay:
                    debugPrint("Player finished loading URL and is ready to play")
                    controlView.alpha = 0
                case .failed:
                    debugPrint("Player failed to load URL")
                    // Handle failure to load URL
                case .unknown:
                    debugPrint("Player status is unknown")
                    // Handle unknown status
                @unknown default:
                    fatalError("Unhandled player status")
                }
            }
        }
    }
    
    deinit {
        debugPrint("deinit")
        player?.removeObserver(self, forKeyPath: #keyPath(AVPlayer.rate))
        player?.removeObserver(self, forKeyPath: #keyPath(AVPlayer.status))
    }
    
    func displaySetUpPlayerLayer(viewModel: Player.SetUpPlayer.ViewModel) {
        controlView.alpha = 1
        player = AVPlayer(url: viewModel.url)
        playerLayer = AVPlayerLayer(player: player)
        playerLayer?.frame = playerView.bounds
        playerLayer?.videoGravity = .resizeAspectFill
        
        guard let playerLayer = playerLayer else { return }
        
        setupPictureInPicture()
        playerView.layer.addSublayer(playerLayer)
        
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(controlViewTapped))
        view.addGestureRecognizer(tapGesture)
        view.isUserInteractionEnabled = true
        
        setUpPlayerObserver(viewModel: viewModel)
    }
    
    func displayPlayPauseButtonTapped(viewModel: Player.PlayPauseButtonTapped.ViewModel) {
        playPauseButton.setImage(viewModel.playPauseImage, for: .normal)
        if viewModel.isPlay {
            player?.pause()
        } else {
            player?.play()
        }
    }
    
    func displaySeekBarButtonTapped(viewModel: Player.SeekBarButtonTapped.ViewModel) {
        player?.seek(to: viewModel.seekToTime)
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) { [weak self] in
            guard let self = self else { return}
            self.isSeeking = false
        }
    }
    
    @objc func controlViewTapped() {
        if controlView.alpha == 0 {
            controlView.alpha = 0.6
        } else  {
            controlView.alpha = 0
        }
    }
    
    private func setUpPlayerObserver(viewModel: Player.SetUpPlayer.ViewModel) {
        player?.addObserver(self, forKeyPath: #keyPath(AVPlayer.rate), options: [.new], context: nil)
        player?.addObserver(self, forKeyPath: #keyPath(AVPlayer.status), options: [.new], context: nil)
        player?.addPeriodicTimeObserver(forInterval: CMTimeMake(value: 1, timescale: 1), queue: DispatchQueue.main) { [weak self] time in
            guard let self = self else { return }
            let currentTime = CMTimeGetSeconds(time)
            if !isSeeking {
                let duration = player?.currentItem?.duration.seconds ?? 0.0
                if duration.isFinite {
                    self.seekBarSlider.minimumValue = 0
                    self.seekBarSlider.maximumValue = Float(duration)
                    self.seekBarSlider.value = Float(currentTime)
                }
            }
            self.durationLabel.text = DateFormatter.formattedTime(seconds: Int(currentTime))
        }
        
        if viewModel.isAutoPlay {
            player?.play()
        }
    }
    
    private func setupPictureInPicture() {
        guard let playerLayer = playerLayer else { return }
        if AVPictureInPictureController.isPictureInPictureSupported() {
            debugPrint("==> pip support")
            pipController = AVPictureInPictureController(playerLayer: playerLayer)
            pipController?.delegate = self
        } else {
            debugPrint("==> not pip support")
        }
    }
}

extension PlayerViewController: AVPictureInPictureControllerDelegate {
    func pictureInPictureControllerWillStartPictureInPicture(_ pictureInPictureController: AVPictureInPictureController) {
        debugPrint("Picture in Picture will start")
    }
    
    func pictureInPictureControllerDidStartPictureInPicture(_ pictureInPictureController: AVPictureInPictureController) {
        debugPrint("Picture in Picture started")
    }
    
    func pictureInPictureController(_ pictureInPictureController: AVPictureInPictureController, failedToStartPictureInPictureWithError error: Error) {
        debugPrint("Failed to start Picture in Picture: \(error.localizedDescription)")
    }
    
    func pictureInPictureControllerWillStopPictureInPicture(_ pictureInPictureController: AVPictureInPictureController) {
        debugPrint("Picture in Picture will stop")
    }
    
    func pictureInPictureControllerDidStopPictureInPicture(_ pictureInPictureController: AVPictureInPictureController) {
        debugPrint("Picture in Picture stopped")
    }
    
    func pictureInPictureControllerShouldAutomaticallyDismissPictureInPicture(_ pictureInPictureController: AVPictureInPictureController) -> Bool {
        return true
    }
    
    func pictureInPictureController(_ pictureInPictureController: AVPictureInPictureController, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler completionHandler: @escaping (Bool) -> Void) {
        debugPrint("PIP delegate")
    }
}

